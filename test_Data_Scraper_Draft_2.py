import unittest
import Data_Scraper_Draft_2
from bs4 import BeautifulSoup
import requests

def getSoup(website):
    result = requests.get(website)
    content = result.text
    return BeautifulSoup(content,'lxml')

class TestScraper(unittest.TestCase):
    def setUp(self):
        self.soup_repulsion = getSoup('https://2e.aonprd.com/Spells.aspx?ID=254')
        self.soup_worm_sting = getSoup('https://2e.aonprd.com/Spells.aspx?ID=242')
        self.soup_raise_dead = getSoup('https://2e.aonprd.com/Spells.aspx?ID=243')
        self.soup_dino_fort = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1099')
        self.soup_acid_splash = getSoup('https://2e.aonprd.com/Spells.aspx?ID=3')
        self.soup_quick_sort = getSoup('https://2e.aonprd.com/Spells.aspx?ID=978')
        self.soup_eat_fire = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1352')
        self.soup_chill_touch = getSoup('https://2e.aonprd.com/Spells.aspx?ID=35')
        self.soup_alarm = getSoup('https://2e.aonprd.com/Spells.aspx?ID=7')
        self.soup_bread_crumbs = getSoup('https://2e.aonprd.com/Spells.aspx?ID=876')
        self.soup_frost_ray = getSoup('https://2e.aonprd.com/Spells.aspx?ID=245')
        self.soup_know_dir = getSoup('https://2e.aonprd.com/Spells.aspx?ID=169')
        self.soup_time_sense = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1193')
        self.soup_jump = getSoup('https://2e.aonprd.com/Spells.aspx?ID=167')
        self.soup_deep_breath = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1315')
        self.soup_summon_instrument = getSoup('https://2e.aonprd.com/Spells.aspx?ID=721')
        self.soup_animate_dead = getSoup('https://2e.aonprd.com/Spells.aspx?ID=666')
        self.soup_choir = getSoup('https://2e.aonprd.com/Spells.aspx?ID=886')
        self.soup_exchange_image = getSoup('https://2e.aonprd.com/Spells.aspx?ID=549')
        self.soup_feather_fall = getSoup('https://2e.aonprd.com/Spells.aspx?ID=111')
        self.soup_gravity_pull = getSoup('https://2e.aonprd.com/Spells.aspx?ID=921')
        self.soup_harm = getSoup('https://2e.aonprd.com/Spells.aspx?ID=146')
        self.soup_thunder_sphere = getSoup('https://2e.aonprd.com/Spells.aspx?ID=927')
        self.soup_lose_path = getSoup('https://2e.aonprd.com/Spells.aspx?ID=940')
        self.soup_spirit_torrent = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1267')
        self.soup_element_breath = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1420')
        self.soup_chrom_armor = getSoup('https://2e.aonprd.com/Spells.aspx?ID=881')
        self.soup_ann_wave = getSoup('https://2e.aonprd.com/Spells.aspx?ID=902')
        self.soup_rad_torrent = getSoup('https://2e.aonprd.com/Spells.aspx?ID=934')
        self.soup_daze = getSoup('https://2e.aonprd.com/Spells.aspx?ID=61')
        self.soup_element_counter = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1421')
        self.soup_holy_cascade = getSoup('https://2e.aonprd.com/Spells.aspx?ID=151')
        # description edge case (contains bullet pts)
        self.soup_righteous_might = getSoup('https://2e.aonprd.com/Spells.aspx?ID=263') 
        self.soup_chromatic_image = getSoup('https://2e.aonprd.com/Spells.aspx?ID=882')
        self.soup_variable_gravity = getSoup('https://2e.aonprd.com/Spells.aspx?ID=1026')
        self.soup_fey_form = getSoup('https://2e.aonprd.com/Spells.aspx?ID=910')
        self.soup_gift = getSoup('https://2e.aonprd.com/Spells.aspx?ID=904')

    def test_scrape_actions(self):
        # Tests for every type of spell action, as well as spells that have other spells listed in their description.
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_eat_fire),"reaction")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_feather_fall),"reaction")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_lose_path),"reaction") 

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_time_sense),"one action")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_jump),"one action")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_deep_breath),"one action")

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_choir),"one action to three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_gravity_pull),"one action to three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_harm),"one action to three actions")

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_repulsion),"two actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_frost_ray),"two actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_know_dir),"two actions")
    
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_spirit_torrent),"two actions or three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_element_breath),"two actions or three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_chrom_armor),"two actions or three actions")

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_quick_sort),"three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_summon_instrument),"three actions")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_animate_dead),"three actions")

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_raise_dead),"Cast Time: 10 minutes")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_alarm),"Cast Time: 10 minutes")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_bread_crumbs),"Cast Time: 1 minute")

        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_thunder_sphere),"two actions to 2 rounds")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_ann_wave), "two actions to 2 rounds")
        self.assertEqual(Data_Scraper_Draft_2.scrape_actions(self.soup_rad_torrent), "two actions to 2 rounds")

    def test_scrape_traits(self):
        # Tests for the following edge cases: No school of magic, one school of magic (a spell can't have multiple schools) no traits, one trait, several traits
        # Also tests every school of magic, which includes "Abjuration","Conjuration","Divination","Enchantment","Evocation","Illusion","Necromancy","Transmutation"
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_acid_splash), ['Evocation', ['Acid', 'Attack', 'Cantrip']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_alarm), ['Abjuration',[]])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_animate_dead),['Necromancy',[]])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_bread_crumbs),['Abjuration', []])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_chill_touch),['Necromancy', ['Cantrip', 'Negative']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_choir), ['Evocation', ['Sonic']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_chrom_armor), ['Abjuration', ['Light']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_chromatic_image), ['Illusion', ['Visual']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_deep_breath), ['', ['Air', 'Cantrip', 'Manipulate']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_dino_fort), ['Conjuration', ['Rare']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_know_dir), ['Divination', ['Cantrip', 'Detection']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_daze), ['Enchantment', ['Cantrip', 'Mental', 'Nonlethal']])
        self.assertEqual(Data_Scraper_Draft_2.scrape_traits(self.soup_jump), ['Transmutation', ['Move']])
    
    def test_scrape_traditions(self):
        # Tests spells the have one tradition, two traditions, three traditions, and four tradition.
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_chromatic_image), ['Arcane', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_daze), ['Arcane', 'Divine', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_deep_breath), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_dino_fort), ['Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_eat_fire), ['Arcane', 'Occult', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_element_breath), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_element_counter), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_exchange_image), ['Arcane', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_feather_fall), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_fey_form), ['Occult', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_frost_ray), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_gift), ['Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_gravity_pull), ['Arcane', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_harm), ['Divine'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_holy_cascade), ['Divine'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_jump), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_know_dir), ['Divine', 'Occult', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_lose_path), ['Occult', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_quick_sort), ['Arcane', 'Divine', 'Occult', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_rad_torrent), ['Divine', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_raise_dead), ['Divine'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_repulsion), ['Arcane', 'Divine', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_righteous_might), ['Divine'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_spirit_torrent), ['Divine', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_summon_instrument), ['Divine', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_thunder_sphere), ['Arcane', 'Primal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_time_sense), ['Arcane', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_variable_gravity), ['Arcane', 'Occult'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_traditions(self.soup_worm_sting), ['Arcane', 'Primal'])
    
    def test_scrape_cast_type(self):
        # Tests spells with no cast types, one cast type, two cast types, and three cast types.
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_chromatic_image), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_daze), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_deep_breath), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_dino_fort), ['Material', 'Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_eat_fire), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_element_breath), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_element_counter), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_exchange_image), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_feather_fall), ['Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_fey_form), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_frost_ray), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_gift), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_gravity_pull), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_harm), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_holy_cascade), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_jump), ['Somatic'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_know_dir), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_lose_path), ['Somatic'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_quick_sort), ['Material', 'Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_rad_torrent), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_raise_dead), ['Material', 'Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_repulsion), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_righteous_might), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_spirit_torrent), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_summon_instrument), ['Material', 'Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_thunder_sphere), [])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_time_sense), ['Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_variable_gravity), ['Somatic', 'Verbal'])
        self.assertCountEqual(Data_Scraper_Draft_2.scrape_cast_type(self.soup_worm_sting), ['Somatic', 'Verbal'])
    
    # def test_scrape_description(self):
    #     # TODO: Implement this
    
    def test_scrape_requirement(self):
        # Tests spells with and without requirements.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_daze), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_element_counter), "You have a spell slot from which you could Cast a Spell of the triggering spell's countering element see text.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_exchange_image), "You have the") # NOTE: text is cut off due to a link.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_feather_fall), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_gift), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_gravity_pull), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_holy_cascade), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_lose_path), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_quick_sort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_raise_dead), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_repulsion), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_righteous_might), "You have a deity.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_spirit_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Requirements", self.soup_worm_sting), "")
    
    def test_scrape_trigger(self):
        # Tests spells with and without triggers.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_daze), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_eat_fire), "You would take fire damage.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_element_counter), "You or a creature within 60 feet rolls a saving throw against a spell with the") # NOTE: text gets cut off due to a link.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_exchange_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_feather_fall), "a creature within range is falling")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_gift), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_gravity_pull), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_holy_cascade), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_lose_path), "A creature in range Strides.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_quick_sort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_raise_dead), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_repulsion), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_spirit_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Trigger", self.soup_worm_sting), "")
    
    def test_scrape_cost(self):
        # Tests spells with and without costs.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_daze), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_exchange_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_feather_fall), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_gift), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_gravity_pull), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_holy_cascade), "one vial of")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_lose_path), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_quick_sort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_raise_dead), "diamonds worth a total value of the target's level (minimum 1) x 200 gp")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_repulsion), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_spirit_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Cost", self.soup_worm_sting), "")
    
    def test_scrape_range(self):
        # Tests spells with and without ranges.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_daze), "60 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_dino_fort), "500 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_element_breath), "30 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_exchange_image), "touch")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_feather_fall), "60 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_frost_ray), "120 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_gift), "30 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_gravity_pull), "30 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_harm), "varies")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_holy_cascade), "500 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_lose_path), "60 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_quick_sort), "10 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_raise_dead), "10 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_repulsion), "emanation up to 40-feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_spirit_torrent), "60 feet")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_thunder_sphere), 'varies')
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Range", self.soup_worm_sting), "touch")
    
    def test_scrape_targets(self):
        # Tests spells with and without targets.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_daze), "1 creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_exchange_image), "you and 1 other humanoid")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_feather_fall), "1 falling creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_frost_ray), "1 creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_gift), "1 willing creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_gravity_pull), "1 creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_harm), "1 living creature or 1 willing undead creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_holy_cascade), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_lose_path), "the triggering creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_quick_sort), "up to 200 unattended objects in range, each of light Bulk or less")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_raise_dead), "1 dead creature of 13th level or lower")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_repulsion), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_spirit_torrent), "varies")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_thunder_sphere), "1 creature")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Targets", self.soup_worm_sting), "1 creature")
    
    def test_scrape_area(self):
        # Tests spells with and without areas.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_daze), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_element_breath), "60-foot cone")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_exchange_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_feather_fall), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_gift), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_gravity_pull), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_holy_cascade), "20-foot burst")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_lose_path), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_quick_sort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_rad_torrent), "line 60 feet or longer")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_raise_dead), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_repulsion), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_spirit_torrent), "varies")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Area", self.soup_worm_sting), "")
    
    def test_scrape_duration(self):
        # Tests spells with and without durations.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_chromatic_image), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_daze), "1 round")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_deep_breath), "10 minutes")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_dino_fort), "24 hours (see text)")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_eat_fire), "until the end of your next turn")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_exchange_image), "varies")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_feather_fall), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_fey_form), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_gift), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_gravity_pull), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_holy_cascade), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_lose_path), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_quick_sort), "up to 1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_rad_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_raise_dead), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_repulsion), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_righteous_might), "1 minute")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_spirit_torrent), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_summon_instrument), "1 hour")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_variable_gravity), "5 minutes")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Duration", self.soup_worm_sting), "")
    
    def test_scrape_saving_throw(self):
        # Tests spells with and without saving throws.
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_chromatic_image), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_daze), "Will")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_deep_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_dino_fort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_eat_fire), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_element_breath), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_element_counter), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_exchange_image), "Will")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_feather_fall), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_fey_form), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_frost_ray), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_gift), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_gravity_pull), "Fortitude")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_harm), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_holy_cascade), "See handbook for details.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_jump), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_know_dir), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_lose_path), "Will")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_quick_sort), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_rad_torrent), "See handbook for details.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_raise_dead), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_repulsion), "Will")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_righteous_might), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_spirit_torrent), "See handbook for details.")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_summon_instrument), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_thunder_sphere), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_time_sense), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_variable_gravity), "")
        self.assertEqual(Data_Scraper_Draft_2.scrape_other("Saving Throw", self.soup_worm_sting), "Fortitude")

if __name__ == '__main__':
    unittest.main()
